/**
 * @file interface_manager.h
 * @brief ????????????????????
 * @author ?????
 * @date 2025-08-10
 * 
 * ?????????
 * 1. ???????????????????????????????????
 * 2. ?????????????
 * 3. ????????????????????
 * 4. ????????????
 */

#ifndef __INTERFACE_MANAGER_H
#define __INTERFACE_MANAGER_H

#ifdef __cplusplus
extern "C" {
#endif

/* ????????????? */
#include "main.h"
#include "ST7567A.h"
#include "frequency_counter.h"

/* ???? */
#define MAX_MENU_ITEMS      6       // ???????????
#define DISPLAY_UPDATE_MS   100     // ?????????(ms)

/* ??????????? */
typedef enum {
    INTERFACE_MAIN = 0,         // ??????
    INTERFACE_MENU,             // ???????
    INTERFACE_CALIBRATION,      // ???????
    INTERFACE_CAL_STEP_SELECT,  // ?????????
    INTERFACE_CAL_CONFIRM,      // ???????
    INTERFACE_CAL_ZERO,         // ??????
    INTERFACE_CAL_POWER,        // ???????????
    INTERFACE_CAL_BAND,         // ????
    INTERFACE_CAL_COMPLETE,     // ??????
    INTERFACE_STANDARD,         // ??????
    INTERFACE_ALARM,            // ???????
    INTERFACE_BRIGHTNESS,       // ???????
    INTERFACE_ABOUT             // ???????
} InterfaceIndex_t;

/* ??????? */
typedef enum {
    KEY_NONE = 0,               // ?????
    KEY_UP,                     // ????/????? (PB12)
    KEY_OK,                     // ???? (PB13)
    KEY_DOWN                    // ????/?????? (PB14)
} KeyValue_t;

/* ????????? */
typedef enum {
    KEY_STATE_IDLE = 0,         // ??????
    KEY_STATE_PRESSED,          // ??????
    KEY_STATE_LONG_PRESSED      // ??????
} KeyState_t;

/* VSWR????????? */
typedef enum {
    VSWR_COLOR_GREEN = 0,       // ??? (??1.5)
    VSWR_COLOR_YELLOW,          // ??? (1.5-2.0)
    VSWR_COLOR_RED              // ??? (>2.0)
} VSWRColor_t;

/* ?????????? */
typedef enum {
    POWER_UNIT_W = 0,           // ????
    POWER_UNIT_KW               // ???
} PowerUnit_t;

/* ?????????????? */
typedef struct {
    float forward_power;        // ??????
    float reflected_power;      // ???????
    PowerUnit_t forward_unit;   // ?????????
    PowerUnit_t reflected_unit; // ??????????
    uint8_t is_valid;          // ???????????
} PowerResult_t;

/* ??????????? */
typedef struct {
    float vswr;                 // ?????
    float reflection_coeff;     // ???????
    float transmission_eff;     // ????????(%)
    VSWRColor_t vswr_color;     // VSWR??????
    uint8_t is_valid;          // ???????????
} RFParams_t;

/* ???????? */
typedef struct {
    uint8_t index;              // ???????
    uint8_t parent;             // ?????????
    uint8_t next;               // ????????????
    void (*display_func)(void); // ??????????
    const char* title;          // ???????
} MenuItem_t;

/* ???????????? */
typedef struct {
    uint8_t is_active;          // ??????????
    uint16_t duration_count;    // ?????????(ms)
} BuzzerState_t;

/* ?????????? */
typedef enum {
    CAL_STEP_CONFIRM = 0,       // ?????????
    CAL_STEP_ZERO,              // ??????
    CAL_STEP_POWER,             // ???????????
    CAL_STEP_BAND,              // ????
    CAL_STEP_COMPLETE           // ??????
} CalibrationStep_t;

/* ?????????? */
/* ???????????? */
#pragma pack(1)  // ???1??????????????????
typedef struct {
    float power;                // ?????(W)
    float voltage;              // ??????(V)
} PowerCalPoint_t;

typedef struct {
    float forward_offset;       // ????????????(V)
    float reflected_offset;     // ?????????????(V)
    PowerCalPoint_t fwd_table[20];   // ???????????(100W-2000W)
    PowerCalPoint_t ref_table[20];   // ????????????(100W-2000W)
    uint8_t fwd_points;         // ???????????(???20??)
    uint8_t ref_points;         // ???????????(???20??)
    float freq_gain_fwd;        // ??????????????(????)
    float freq_gain_ref;        // ??????????????(????)
    float cal_frequency;        // ?????(MHz)
    float freq_trim;            // ??????????
    uint8_t is_calibrated;      // ????????
} CalibrationData_t;
#pragma pack()   // ?????????

/* ????????? */
typedef struct {
    CalibrationStep_t current_step;     // ??????????
    float cal_frequency;                // ????????(MHz)
    uint8_t current_power_point;        // ????????????(0-19)
    uint8_t current_channel;            // ?????????(0=????,1=????)
    uint8_t sample_count;               // ????????
    float sample_sum_fwd;               // ????????????
    float sample_sum_ref;               // ?????????????
    uint8_t is_stable;                  // ??????????
    uint16_t stable_count;              // ?????????
    float target_power;                 // ??????
    uint8_t power_cal_mode;             // ?????????(0=????,1=????)
    uint8_t sample_completed;           // ?????????
    uint8_t is_single_step;             // ?????????
    uint8_t selected_step;              // ??е??????
} CalibrationState_t;

/* ??????????????? */
typedef struct {
    InterfaceIndex_t current_interface;     // ???????
    uint8_t menu_cursor;                    // ??????????
    uint8_t brightness_level;               // ??????(0-10)
    uint8_t alarm_enabled;                  // ???????
    float vswr_alarm_threshold;             // VSWR???????
    uint8_t alarm_selected_item;            // ????????????? (0=????, 1-5=????)
    uint8_t vswr_digit_position;            // VSWR数值编辑位置 (0=百位, 1=十位, 2=个位, 3=小数位)
    uint32_t last_update_time;              // ??????????
    uint8_t need_refresh;                   // ?????????
    uint32_t key_press_start_time;          // ??????????
    uint8_t key_long_press_detected;        // ?????????
    uint8_t interface_first_enter;          // ?????????????
} InterfaceManager_t;

/* ?????????? */
extern InterfaceManager_t g_interface_manager;
extern PowerResult_t g_power_result;
extern RFParams_t g_rf_params;
extern BuzzerState_t g_buzzer_state;
extern CalibrationData_t g_calibration_data;
extern CalibrationState_t g_calibration_state;

/* ???????? */

/**
 * @brief ??????????????
 * @param ??
 * @retval 0: ???, -1: ???
 */
int8_t InterfaceManager_Init(void);

/**
 * @brief ??????????????????
 * @param ??
 * @retval ??
 * @note ??main???????????????
 */
void InterfaceManager_Process(void);

/**
 * @brief ????????????
 * @param key: ?????
 * @param state: ??????
 * @retval ??
 */
void InterfaceManager_HandleKey(KeyValue_t key, KeyState_t state);
void InterfaceManager_HandleLongPress(uint8_t key);

/**
 * @brief ?????????????
 * @param interface: ??????????
 * @retval ??
 */
void InterfaceManager_SwitchTo(InterfaceIndex_t interface);

/**
 * @brief ????????????
 * @param ??
 * @retval ??
 */
void InterfaceManager_ForceRefresh(void);

/**
 * @brief ???????????
 * @param forward_power: ??????
 * @param reflected_power: ???????
 * @retval ??
 */
void InterfaceManager_UpdatePower(float forward_power, float reflected_power);

/**
 * @brief ???????????
 * @param vswr: ?????
 * @param reflection_coeff: ???????
 * @param transmission_eff: ????????
 * @retval ??
 */
void InterfaceManager_UpdateRFParams(float vswr, float reflection_coeff, float transmission_eff);

/**
 * @brief ????????
 * @param ??
 * @retval ?????
 */
KeyValue_t InterfaceManager_GetKey(void);

/**
 * @brief ???????????
 * @param level: ??????(0-10)
 * @retval ??
 */
void InterfaceManager_SetBrightness(uint8_t level);

/**
 * @brief ??????????
 * @param duration_ms: ???????(ms)
 * @retval ??
 */
void InterfaceManager_Beep(uint16_t duration_ms);

/**
 * @brief ?????????????????????TIM3???????????
 * @param ??
 * @retval ??
 */
void InterfaceManager_BuzzerProcess(void);

/* ??????????????? */
void Interface_DisplayMain(void);           // ?????????
void Interface_DisplayMenu(void);           // ??????????
void Interface_DisplayCalibration(void);    // ??????????
void Interface_DisplayCalStepSelect(void);  // 标定步骤选择界面显示
void Interface_DisplayCalConfirm(void);     // ??????????
void Interface_DisplayCalZero(void);        // ?????????
void Interface_DisplayCalPower(void);       // ??????????????
void Interface_DisplayCalBand(void);        // ??????????????
void Interface_DisplayCalReflect(void);     // ??????????????
void Interface_DisplayCalFreq(void);        // ??????????
void Interface_DisplayCalComplete(void);    // ?????????
void Interface_DisplayStandard(void);       // ?????????
void Interface_DisplayAlarm(void);          // ??????????????
void Interface_DisplayBrightness(void);     // ??????????????
void Interface_DisplayAbout(void);          // ??????????

/* ?????????????? */
void Calibration_Init(void);                // ??????????
void Calibration_LoadFromEEPROM(void);      // ??EEPROM???????????
void Calibration_SaveToEEPROM(void);        // ????????????EEPROM
void Calibration_StartStep(CalibrationStep_t step);  // ??????????
void Calibration_InitPowerStep(void);       // ??????????????
void Calibration_InitBandStep(void);        // ??????????????
void Calibration_ProcessSample(void);       // ???????????
uint8_t Calibration_GetBandIndex(float frequency);   // ??????????
float Calibration_CalculatePowerFromTable(float voltage, PowerCalPoint_t* table, uint8_t points);  // ?????????
float Calibration_ApplyCorrection(float raw_voltage, uint8_t is_forward, float frequency);  // ??????????
float Calibration_CalculatePower(float voltage, uint8_t is_forward);  // ????????????

// ??????????
void System_BootSequence(void);             // ??????????????

#ifdef __cplusplus
}
#endif

#endif /* __INTERFACE_MANAGER_H */
